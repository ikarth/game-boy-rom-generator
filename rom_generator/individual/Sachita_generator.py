import argparse
import copy
import random
from generator import makeBasicProject, addSpriteSheet, makeBackground, makeScene, makeActor, addSymmetricSceneConnections, makeMusic, reverse_direction, initializeGenerator, writeProjectToDisk
def SachitasGame():
 """
 Create an empty world as an example to build future projects from.
 """
 # Set up a barebones project
 project = makeBasicProject()
 # Create sprite sheet for the player sprite
 player_sprite_sheet = addSpriteSheet(project, "actor_animated.png", "actor_animated", "actor_animated")
 project.settings["playerSpriteSheetId"] = player_sprite_sheet["id"]
 # add a sprite we can use for the rocks

 duck_sprite = addSpriteSheet(project, "duck.png", "duck", "animated", 2)
 actor2 = makeActor(duck_sprite, 1, 30, "animated")
 doorway_sprite = addSpriteSheet(project, "tower.png", "tower", "static")
 actor3 = makeActor(doorway_sprite, 29, 2)
 a_rock_sprite = addSpriteSheet(project, "rock.png", "rock", "static")
 actor4 = makeActor(a_rock_sprite, 15, 30)
 
 a_rock_sprite = addSpriteSheet(project, "rock.png", "rock", "static")
 border = makeActor(a_rock_sprite, 1, 2, "static")
 border = makeActor(a_rock_sprite, 1, 9, "static")
 border = makeActor(a_rock_sprite, 1, 16, "static")
 border = makeActor(a_rock_sprite, 2, 2, "static")
 border = makeActor(a_rock_sprite, 2, 9, "static")
 border = makeActor(a_rock_sprite, 2, 10, "static")
 border = makeActor(a_rock_sprite, 2, 11, "static")

  # Add a background image
 default_bkg = makeBackground("stars.png", "stars")
 project.backgrounds.append(default_bkg)
 num = random.randint(1,20)
 a_scene = copy.deepcopy(makeScene(f"Scene", default_bkg))
 project.scenes.append(a_scene)
 #make a function for collisions
 
 # Get information about the background
 bkg_x = default_bkg["imageWidth"]
 bkg_y = default_bkg["imageHeight"]
 bkg_width = default_bkg["width"]
 bkg_height = default_bkg["height"]
 actor = makeActor(a_rock_sprite, 1, 1)
 actor2 = makeActor(duck_sprite, 5,5)
 #actor3 = makeActor(a_doorway_sprite, 31, 31)
 a_scene['actors'].append(actor)
 a_scene['actors'].append(actor3)
 actor = makeActor(a_rock_sprite, 5, 5, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 5, 3, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 5, 7, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 5, 9, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 10, 0, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 10, 2, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 10, 4, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 16, 4, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 16, 6, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 16, 8, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 16, 10, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 18, 10, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 20, 10, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 22, 10, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 22, 8, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 22, 6, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 24, 6, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 26, 6, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 28, 6, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 4, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 8, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 10, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 12, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 14, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 16, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27, 4, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 25, 20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 23, 20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 21, 20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 19, 20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 17,  20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27,  18, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 29,  18, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 31,  18, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27,  18, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 23,  26, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 23,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 23,  24, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 23,  22, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27,  18, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 17,  24, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 27,  18, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 11,  21, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 11,  23, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 11,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 13,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 15,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 17,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 17,  30, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 4,  20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 4,  22, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 4,  24, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 4,  26, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 4,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 2,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 0,  28, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 15,  20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 13,  20, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 17,  22, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 0,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 2,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 4,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 6,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 8,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 10,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 12,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 14,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 16,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 18,  15, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 10,  13, "static")
 a_scene['actors'].append(actor)
 actor = makeActor(a_rock_sprite, 10,  11, "static")
 #import pdb; pdb.set_trace()
 # add a sprite to indicate the location of a doorway
 # a better way to do this in the actual levels is to alter the background image instead
 # Add some music
 project.music.append(makeMusic("template", "template.mod"))
 # Set the starting scene
 project.settings["startSceneId"] = project.scenes[0]["id"]
 return project
# Utilities
class bcolors:
 HEADER = '\033[95m'
 OKBLUE = '\033[94m'
 OKGREEN = '\033[92m'
 WARNING = '\033[93m'
 FAIL = '\033[91m'
 ENDC = '\033[0m'
 BOLD = '\033[1m'
 UNDERLINE = '\033[4m'
### Run the generator
if __name__ == '__main__':
  parser = argparse.ArgumentParser(description="Generate a Game Boy ROM via a GB Studio project file.")
  parser.add_argument('--destination', '-d', type=str, help="destination folder name", default="../gbprojects/projects/")
  parser.add_argument('--assets', '-a', type=str, help="asset folder name", default="../assets/")
  args = parser.parse_args()
  initializeGenerator(asset_folder = args.assets)
  project = SachitasGame()
  writeProjectToDisk(project, output_path = args.destination, assets_path="assets/") 
  if args.destination == "../gbprojects/projects/":
   print(f"{bcolors.WARNING}NOTE: Used default output directory, change with the -d flag{bcolors.ENDC}")
   print(f"{bcolors.OKBLUE}See generate.py --help for more options{bcolors.ENDC}")
